Data IO System
=====================

XOA Core allows users to subscribe to different messages generated by different test suites and subsystems (ResourcesManager, ExecutorManager), so you can get test statistics/results, monitor test progress, receiver errors and warnings, etc.

Message Subscription
-------------------------

XOA Core provide two types of messages for you to subscribe to:

 * ``Subsystem Type``
 * ``Test Execution Type``

Subsystem Type Message
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Subscribe to subsystem-type messages to receive messages exchanged between your code and the testers.

.. code-block:: python
    :caption: Subscribe to the messages from tester resource management subsystem.

    async for msg in my_controller.listen_changes(<subsystem-type>}:
        # do whatever you want to the message

There are two types of subsystems that you can subscribe to:

.. code-block:: python
    :caption: Subsystem types

    types.PIPE_EXECUTOR
    types.PIPE_RESOURCES


Test Execution Type
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Subscribe to the messages from a test execution.

.. code-block:: python
    :caption: Subscribe to statistics of test execution

    async for msg in my_controller.listen_changes(execution_id, _filter={<filter_type>}):
        # do whatever you want to the message

A test execution can generate different types of messages, such as test statistics, test progress, test state, errors, and warnings. To subscribe to a specific type, you can use the ``_filter`` argument.

The ``_filter`` argument is an set of filter types. The first parameter of ``_filter`` argument is a mandatory identifier of the subsystem or the test suite execution. Available filters types are as shown below:

.. code-block:: python
    :caption: Available filters types

    class EMsgType(Enum):
        STATE = "STATE"
        DATA = "DATA"
        STATISTICS = "STATISTICS"
        PROGRESS = "PROGRESS"
        WARNING = "WARNING"
        ERROR = "ERROR"

.. note::
    
    ``_filter`` argument is optional. If it is not provided, all message types will be returned from this test suite execution.


In the example bellow, we subscribe only to the statistic messages from the test suite that is in execution.

    ``Line no.25``: Subscribe to all message exchanges with the tester.
    
    ``Line no.36``: Subscribe to statistic messages.

.. literalinclude:: ../code_example/main.py
    :language: python
    :emphasize-lines: 35, 52